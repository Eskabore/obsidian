Prompt user for Input
    If input is valid
            Draw right-aligned pyramid
                For each new row
                   Print decrementing number of 'space'.
                   Print incrementing number of 'hashes'.
                   Print a new line
    While value height > 0 & < 9:

    Tell user Input is Invalid
    Go back to line 1

  Algorithm :

for x = n;
for x = y;

for z = 8;
z (n)
x(n) = z + y(n)



line 1 = 1 hashes + 6 dots
line 2 = 2 hashes + 7 dots

int height = n = received value

int i = return to the line

   for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            printf("#");
        }
        printf("\n");

For "n" > 0 && < 9



int i  = (n x number of rows); // New row = return to the line
/*
for i = 0; Row 0 = line 1
*/

int j = (n x number of " "); //

int k = (n x number of hashes);
       printf(n x "#");
/*
int
*/

do
  for ( i = height )
      printf("\n");


    do print dots
int j = (n x number of hashes)

for (n=1)
 {
   printf n("*", "#")
 }

 ------------------------------

 12 - 13/03/2022

 Prompt user for Input
Check Input validity
If input is valid
  Draw right-aligned pyramid
    For each new row
      Print decrementing number of space
      Print incrementing number of hashes
      Print a new line
Else
Go back to line 1


// Draft ideas

First & Last pyramid's row should have NO dot
// Current Algorithm suggests:
 that the row-1 start with 7-spaces (then "#") and decrease of 1 every newer row
For n = user input (digit 1-8)
// Correcting Algorithm:
From a value of n(1) -> 0 space
     a value of n(2) -> 1 space row 1
then 0 space row 2
From a value of n(2) -> 2 spaces row 1
then 1 space row 2
then 0 space row 2
When row is superior to 1 and row grows of +1 then programs adds a number of space from row-1 that
is n-1 in a decreasing order from the first row
If user type 1: pyramid should display
# (0 space)
If user type 2: pyramid should display
 # (1 space)
## (0 space)
If user type 3: pyramid should display
  # (2 spaces)
 ## (1 spaces)
### (0 spaces)
If user type 4: pyramid should display
   # (3 spaces)
  ## (2 spaces)
 ### (1 space)
#### (0 space)
If user type 5: pyramid should display
    # (4 spaces)
   ## (3 spaces)
  ### (2 spaces)
 #### (1 space)
##### (0 space)
If user type 6: pyramid should display
     # (5 spaces)
    ## (4 spaces)
   ### (3 spaces)
  #### (2 spaces)
 ##### (1 space)
###### (0 space)
If user type 7: pyramid should display
      # (6 spaces)
     ## (5 spaces)
    ### (4 spaces)
   #### (3 spaces)
  ##### (2 spaces)
 ###### (1 space)
####### (0 space)
If user type 8: pyramid should display
       # (7 spaces)
      ## (6 spaces)
     ### (5 spaces)
    #### (4 spaces)
   ##### (3 spaces)
  ###### (2 spaces)
 ####### (1 space)
######## (0 space)